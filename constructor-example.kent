Class Position;

.new ( Number x, Number y, Number z ) {
    new Object self;

    with self {
        .x = x;
        .y = y;
        .z = z;
    }
    return self;
}

.distance {
    return (.x * .x + .y * .y + .z * z) ** .5;
}

.move ( Number dx, Number dy, Number dz ) {
    .x += dx;
    .y += dy;
    .z += dz;
}

Class Color;

.new {

}

Class TronBit;

.new ( Position pos, Bool state ) {
    new Object self;

    with self {
        .pos   = pos;
        .state = state;
        .color = new Color;

        # Here's one way we could enforce a maximum distance.

        with .pos {
            # throw a conniption if new object would be more than 1km from
            # the origin.
            (.x * .x + .y * .y + .z * .z) ^ .5 must < 1000
        }

        # Here's another. We will decorate .pos with a 'distance' numeric
        # method, which returns how far the position object is from the
        # origin.

        .pos.distance.enum = { return (.x * .x + .y * .y + .z * .z); }
        .pos.distance must < 1000;

        if ( .state ) { .color = '#FF0000'; }
        else          { .color = '#0000FF'; }
        .nistring = 'foo\'bar';
    }
    return self;
}
